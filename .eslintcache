[{"/Users/daisypang/Documents/repo/pose-tagging-web/src/App.tsx":"1","/Users/daisypang/Documents/repo/pose-tagging-web/src/Viewport.tsx":"2","/Users/daisypang/Documents/repo/pose-tagging-web/src/Keypoint.tsx":"3","/Users/daisypang/Documents/repo/pose-tagging-web/src/InsertKPGTool.tsx":"4","/Users/daisypang/Documents/repo/pose-tagging-web/src/Edge.tsx":"5","/Users/daisypang/Documents/repo/pose-tagging-web/src/KeypointGraph.tsx":"6"},{"size":13795,"mtime":1610987149357,"results":"7","hashOfConfig":"8"},{"size":1770,"mtime":1610987288425,"results":"9","hashOfConfig":"8"},{"size":2993,"mtime":1610987707655,"results":"10","hashOfConfig":"8"},{"size":3976,"mtime":1610548349817,"results":"11","hashOfConfig":"8"},{"size":710,"mtime":1610040966059,"results":"12","hashOfConfig":"8"},{"size":2727,"mtime":1610984550918,"results":"13","hashOfConfig":"8"},{"filePath":"14","messages":"15","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"16","usedDeprecatedRules":"17"},"128xwl",{"filePath":"18","messages":"19","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"20","messages":"21","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"22","messages":"23","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"24","messages":"25","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"26"},{"filePath":"27","messages":"28","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/Users/daisypang/Documents/repo/pose-tagging-web/src/App.tsx",["29"],"import React, { useRef, useEffect } from 'react';\nimport create from 'zustand';\nimport { mountStoreDevtool } from 'simple-zustand-devtools';\nimport produce from 'immer';\n// import { HotKeys } from 'react-hotkeys';\nimport './App.css';\nimport { Radio } from 'antd';\nimport { RadioChangeEvent } from 'antd/lib/radio';\nimport { Stage, Sprite } from '@inlet/react-pixi/legacy';\n// import { Stage, Sprite } from '@inlet/react-pixi';\nimport { Viewport } from './Viewport';\n// import { ImageSprite } from './ImageSprite';\nimport { KeypointGraph } from './KeypointGraph';\nimport { InsertKPGTool } from './InsertKPGTool';\nimport { DisplayOptionTool } from './DisplayOptionTool';\nimport { Footer } from './Footer';\nimport { LabelDataDisplay } from './LabelDataDisplay';\nimport { ClickEventData } from 'pixi-viewport';\nimport { getLabelingResult } from './tools';\n// import exampleImage from './example_data/simple002.jpeg';\nimport exampleConfig from './example_labeling_config.json';\n\nexport type PropertyValueType = string | number | boolean | undefined;\nexport interface IConfigPropertyObject {\n  type: string;\n  title: string;\n  default?: PropertyValueType;\n}\n\nexport interface IConfigProperty {\n  [Prop: string]: IConfigPropertyObject;\n}\n\nexport interface IProperties {\n  [prop: string]: {\n    type: string;\n    title: string;\n    value: PropertyValueType;\n  };\n}\n\nexport function getKPDefaultProps(keypointGraphConfig: any[], idx0: number) {\n  const kpLen = keypointGraphConfig.length;\n  let idx = idx0 >= 0 ? idx0 % kpLen : kpLen - ((-1 * idx0) % kpLen);\n  const defaultProps: IProperties = {};\n  Object.keys(keypointGraphConfig[idx].properties).forEach((propName) => {\n    defaultProps[propName] = {\n      type: (keypointGraphConfig[idx].properties as any)[propName].type,\n      title: (keypointGraphConfig[idx].properties as any)[propName].title,\n      value: (keypointGraphConfig[idx].properties as any)[propName].default,\n    };\n  });\n  return defaultProps;\n}\n\nfunction copyProps(props0: IProperties) {\n  const newProps: IProperties = {};\n  Object.keys(props0).forEach((propName) => {\n    newProps[propName] = {\n      type: (props0 as any)[propName].type,\n      title: (props0 as any)[propName].title,\n      value: (props0 as any)[propName].value,\n    };\n  });\n  return newProps;\n}\n\n// store states\nexport type SetupState = {\n  labelingConfig: {\n    configVersion: string;\n    keypointGraph: any[];\n  };\n  labelingConfigError?: string;\n  imagePath?: string;\n  imageLoading: boolean;\n  imageLoadError?: string;\n  stageSize: [number, number]; // width, height\n  keypointRadius: number;\n  setStageSize: (w: number, h: number) => void;\n  setSetupState: (fn: (state: SetupState) => void) => void;\n};\nexport const useSetupStore = create<SetupState>((set) => ({\n  labelingConfig: exampleConfig,\n  // imagePath: 'https://s3-us-west-2.amazonaws.com/s.cdpn.io/693612/coin.png',\n  // imagePath:\n  //   'https://github.com/ruobaole/pose-tagging-web/blob/master/src/example_data/simple002.jpeg',\n  // imagePath: 'https://via.placeholder.com/1080',\n  imageLoading: false,\n  stageSize: [256, 256],\n  keypointRadius: 4,\n  setSetupState: (fn) => set(produce(fn)),\n  setStageSize: (w, h) => set((state) => ({ stageSize: [w, h] })),\n}));\nexport const setupSelector = (state: SetupState) => ({\n  labelingConfig: state.labelingConfig,\n  labelingConfigError: state.labelingConfigError,\n  imagePath: state.imagePath,\n  stageSize: state.stageSize,\n  imageLoading: state.imageLoading,\n  imageLoadError: state.imageLoadError,\n  keypointRadius: state.keypointRadius,\n  setStageSize: state.setStageSize,\n  setSetupState: state.setSetupState,\n});\n\nexport type ToolModeType = 'i' | 'e';\ntype ControlState = {\n  panMode: boolean;\n  toolMode: ToolModeType;\n  set: (fn: (state: ControlState) => void) => void;\n};\nexport const useControlStore = create<ControlState>((set) => ({\n  panMode: false,\n  toolMode: 'i',\n  set: (fn) => set(produce(fn)),\n}));\nexport const controlSelector = (state: ControlState) => ({\n  panMode: state.panMode,\n  toolMode: state.toolMode,\n  setControlState: state.set,\n});\n\nexport interface IKeypoint {\n  name: string;\n  x: number;\n  y: number;\n  properties: IProperties;\n}\nexport type LabelState = {\n  keypointGraphList: IKeypoint[][];\n  nextProps: IProperties;\n  selectedKPG: number;\n  selectedKP?: number;\n  set: (fn: (state: LabelState) => void) => void;\n};\nexport const useLabelStore = create<LabelState>((set) => ({\n  keypointGraphList: [[]],\n  selectedKPG: 0,\n  nextProps: getKPDefaultProps(exampleConfig.keypointGraph, 0),\n  set: (fn) => set(produce(fn)),\n}));\nexport const labelSelector = (state: LabelState) => ({\n  keypointGraphList: state.keypointGraphList,\n  nextProps: state.nextProps,\n  selectedKPG: state.selectedKPG,\n  selectedKP: state.selectedKP,\n  setLabelState: state.set,\n});\n\nif (process.env.NODE_ENV === 'development') {\n  mountStoreDevtool('LabelStore', useLabelStore);\n}\n\nfunction App() {\n  const {\n    labelingConfig,\n    labelingConfigError,\n    imagePath,\n    imageLoadError,\n    stageSize,\n    setStageSize,\n    setSetupState,\n  } = useSetupStore(setupSelector);\n  const {\n    selectedKPG,\n    nextProps,\n    keypointGraphList,\n    setLabelState,\n  } = useLabelStore(labelSelector);\n  const { panMode, toolMode, setControlState } = useControlStore(\n    controlSelector\n  );\n  const stageRef = useRef<HTMLDivElement>(null);\n  const imageRef = useRef<HTMLImageElement>(null);\n  useEffect(() => {\n    if (stageRef && stageRef.current) {\n      setStageSize(stageRef.current.offsetWidth, stageRef.current.offsetHeight);\n      console.log(\n        `${stageRef.current.offsetWidth} * ${stageRef.current.offsetHeight}`\n      );\n    }\n  }, [stageRef, setStageSize]);\n\n  // const keyMap = {\n  //   TOGGLE_VISIBLE: 'v',\n  //   MODE_I: '1',\n  //   MODE_E: '2',\n  //   SAVE: ['s'],\n  // };\n  // const hotKeyHandlers = {\n  //   TOGGLE_VISIBLE: handleToggleVisible,\n  //   MODE_I: handleModeChangeToI,\n  //   MODE_E: handleModeChangeToE,\n  //   SAVE: handleSave,\n  // };\n\n  function handleToggleVisible() {\n    console.log('handleToggleVisible');\n    setLabelState((state) => {\n      if (state.nextProps['is_visible'] !== undefined) {\n        state.nextProps['is_visible'].value = !state.nextProps['is_visible']\n          .value;\n      }\n    });\n  }\n  function handleModeChangeToI() {\n    console.log('handleModeChangeToI');\n    setControlState((state) => {\n      state.toolMode = 'i';\n    });\n  }\n  function handleModeChangeToE() {\n    console.log('handleModeChangeToE');\n    setControlState((state) => {\n      state.toolMode = 'e';\n    });\n  }\n  function handleSave() {\n    console.log('handleSave');\n  }\n  function handleImageLoadError(e: React.SyntheticEvent) {\n    console.log('eeeeee');\n    setSetupState((state) => {\n      state.imageLoadError = e.toString();\n    });\n  }\n  function handleImageLoad(e: React.SyntheticEvent) {\n    console.log(\n      `w:${imageRef.current?.naturalWidth} - h:${imageRef.current?.naturalHeight}`\n    );\n    setSetupState((state) => {\n      state.imageLoadError = undefined;\n    });\n    if (imageRef.current?.naturalWidth && imageRef.current?.naturalHeight) {\n      const dim: number =\n        imageRef.current.naturalWidth > imageRef.current.naturalHeight\n          ? imageRef.current.naturalWidth\n          : imageRef.current.naturalHeight;\n      setSetupState((state) => {\n        state.keypointRadius = dim / 200.0;\n      });\n    }\n  }\n  function handleKeyPress(e: React.KeyboardEvent<any>) {\n    if (e.key === ' ' && !e.repeat) {\n      setControlState((state) => {\n        state.panMode = true;\n      });\n    }\n    if (e.key === 'v') {\n      handleToggleVisible();\n    }\n    if (e.key === '1') {\n      handleModeChangeToI();\n    }\n    if (e.key === '2') {\n      handleModeChangeToE();\n    }\n  }\n  function handleKeyUp(e: React.KeyboardEvent<any>) {\n    if (e.key === ' ' && !e.repeat) {\n      setControlState((state) => {\n        state.panMode = false;\n      });\n    }\n  }\n  function handleToolModeChange(e: RadioChangeEvent) {\n    setControlState((state) => {\n      state.toolMode = e.target.value;\n    });\n  }\n  function handleLabelAreaWheel(e: React.WheelEvent<HTMLDivElement>) {\n    e.stopPropagation();\n  }\n  function handleViewportClicked(e: ClickEventData) {\n    if (panMode) {\n      return;\n    }\n    if (toolMode === 'i') {\n      if (e.event.data.button === 0) {\n        // left click\n        // console.log(`[EVENT]leftmouse ${e.world.x}, ${e.world.y}`);\n        // add keypoint\n        if (\n          keypointGraphList[selectedKPG].length ===\n          labelingConfig.keypointGraph.length\n        ) {\n          console.log(`this keypoint graph is already FULL!`);\n        } else {\n          const nextPointIdx = keypointGraphList[selectedKPG].length;\n          const newKP = {\n            name: labelingConfig.keypointGraph[nextPointIdx].name,\n            x: e.world.x,\n            y: e.world.y,\n            properties: nextProps,\n          };\n          setLabelState((state) => {\n            state.keypointGraphList[selectedKPG].push(newKP);\n            if (nextPointIdx + 1 < labelingConfig.keypointGraph.length) {\n              state.nextProps = getKPDefaultProps(\n                labelingConfig.keypointGraph,\n                nextPointIdx + 1\n              );\n            }\n          });\n        }\n      } else if (e.event.data.button === 2) {\n        // right click\n        // console.log(`[EVENT]rightmouse ${e.world.x}, ${e.world.y}`);\n        // pop keypoint\n        if (keypointGraphList[selectedKPG].length === 0) {\n          console.log(`this keypoint graph is already EMPTY!`);\n        } else {\n          setLabelState((state) => {\n            const popped = state.keypointGraphList[selectedKPG].pop();\n            if (popped) {\n              state.nextProps = copyProps(popped.properties);\n            }\n          });\n        }\n      }\n    }\n  }\n  // console.log(`PAN: ${panMode}`);\n  // console.log(JSON.stringify(keypointGraphList));\n  // console.log(\n  //   `graphLen: ${keypointGraphList.length}; lastGraph.points.length: ${\n  //     keypointGraphList[keypointGraphList.length - 1].length\n  //   }`\n  // );\n  // console.log(\n  //   `lastGraph.lastPoint: ${JSON.stringify(\n  //     keypointGraphList[keypointGraphList.length - 1][\n  //       keypointGraphList[keypointGraphList.length - 1].length - 1\n  //     ]\n  //   )}`\n  // );\n  if (process.env.NODE_ENV !== 'production') {\n    console.log(`keypointGraphList.length: ${keypointGraphList.length}`);\n    console.log(`selectedKPG: ${selectedKPG}`);\n  }\n  return (\n    <div className=\"App\">\n      {/* <header className=\"App-header\"></header> */}\n      <main className=\"App-main\">\n        <div className=\"Tools\">\n          <div className=\"ToolMode\">\n            <Radio.Group\n              options={[\n                { label: 'Insert Mode (1)', value: 'i' },\n                { label: 'Edit Mode (2)', value: 'e' },\n              ]}\n              onChange={handleToolModeChange}\n              value={toolMode}\n              optionType=\"button\"\n              buttonStyle=\"solid\"\n            />\n          </div>\n          <div className=\"ToolDetail\">\n            {toolMode === 'i' ? (\n              <InsertKPGTool\n                nextPointIdx={keypointGraphList[selectedKPG].length}\n              />\n            ) : (\n              <DisplayOptionTool />\n            )}\n          </div>\n        </div>\n        <div className=\"StageArea\" ref={stageRef}>\n          {/* <HotKeys keyMap={keyMap} handlers={hotKeyHandlers} className=\"Stage\"> */}\n          <div className=\"Stage\">\n            <Stage\n              width={stageSize[0]}\n              height={stageSize[1]}\n              tabIndex={0}\n              style={{ cursor: panMode ? 'move' : 'default' }}\n              onKeyPress={handleKeyPress}\n              onKeyUp={handleKeyUp}\n              onContextMenu={(e) => {\n                e.preventDefault();\n              }}\n              options={{ backgroundColor: 0xfcf8ec, forceCanvas: true }}\n            >\n              <Viewport\n                width={stageSize[0]}\n                height={stageSize[1]}\n                enablePan={panMode}\n                onClicked={handleViewportClicked}\n              >\n                {/* <ImageSprite /> */}\n                {imagePath && imageRef.current ? (\n                  <Sprite image={imagePath} x={0} y={0} />\n                ) : null}\n                {keypointGraphList.map((_, gidx) => {\n                  return <KeypointGraph key={`kpg-${gidx}`} graphIdx={gidx} />;\n                })}\n              </Viewport>\n            </Stage>\n          </div>\n          {/* </HotKeys> */}\n          <div className=\"ControlTips\">\n            press [space] to pan;{' '}\n            {toolMode === 'i'\n              ? '[left click] to insert new keypoint; [right click] to pop out keypoint; [v] to toggle is_visible'\n              : '[left click] to select and drag keypoint;'}\n          </div>\n          {imagePath ? (\n            <img\n              ref={imageRef}\n              hidden={true}\n              src={imagePath ? imagePath : ''}\n              alt=\"labeling rawdata\"\n              crossOrigin=\"\"\n              onError={handleImageLoadError}\n              onLoad={handleImageLoad}\n            />\n          ) : null}\n          <div className=\"ErrorNote\" hidden={!imageLoadError}>\n            Image Load Error\n          </div>\n          <div className=\"LabelData\" onWheel={handleLabelAreaWheel}>\n            <LabelDataDisplay\n              downloadContent={getLabelingResult(\n                labelingConfig,\n                keypointGraphList,\n                labelingConfigError,\n                imagePath,\n                imageLoadError\n              )}\n            />\n          </div>\n        </div>\n      </main>\n      <footer className=\"App-footer\">\n        <Footer />\n      </footer>\n    </div>\n  );\n}\n\nexport default App;\n",["30","31"],"/Users/daisypang/Documents/repo/pose-tagging-web/src/Viewport.tsx",[],"/Users/daisypang/Documents/repo/pose-tagging-web/src/Keypoint.tsx",[],"/Users/daisypang/Documents/repo/pose-tagging-web/src/InsertKPGTool.tsx",[],"/Users/daisypang/Documents/repo/pose-tagging-web/src/Edge.tsx",["32"],"import React, { useCallback } from 'react';\nimport { Graphics } from '@inlet/react-pixi';\n\ninterface IEdgeProps {\n  x1: number;\n  y1: number;\n  x2: number;\n  y2: number;\n  color?: number;\n  alpha?: number;\n  lineWidth?: number;\n}\n\nexport function Edge(props: IEdgeProps) {\n  const color = props.color === undefined ? 0xff5e08 : props.color;\n  const alpha = props.alpha === undefined ? 1 : props.alpha;\n  const lineWidth = props.lineWidth === undefined ? 1 : props.lineWidth;\n  const draw = useCallback(\n    (g) => {\n      g.clear();\n      g.lineStyle(lineWidth, color, alpha);\n      g.moveTo(props.x1, props.y1);\n      g.lineTo(props.x2, props.y2);\n    },\n    [props]\n  );\n  return <Graphics draw={draw} />;\n}\n","/Users/daisypang/Documents/repo/pose-tagging-web/src/KeypointGraph.tsx",[],{"ruleId":"33","severity":1,"message":"34","line":219,"column":12,"nodeType":"35","messageId":"36","endLine":219,"endColumn":22},{"ruleId":"37","replacedBy":"38"},{"ruleId":"39","replacedBy":"40"},{"ruleId":"41","severity":1,"message":"42","line":25,"column":5,"nodeType":"43","endLine":25,"endColumn":12,"suggestions":"44"},"@typescript-eslint/no-unused-vars","'handleSave' is defined but never used.","Identifier","unusedVar","no-native-reassign",["45"],"no-negated-in-lhs",["46"],"react-hooks/exhaustive-deps","React Hook useCallback has missing dependencies: 'alpha', 'color', and 'lineWidth'. Either include them or remove the dependency array.","ArrayExpression",["47"],"no-global-assign","no-unsafe-negation",{"desc":"48","fix":"49"},"Update the dependencies array to be: [alpha, color, lineWidth, props.x1, props.x2, props.y1, props.y2]",{"range":"50","text":"51"},[660,667],"[alpha, color, lineWidth, props.x1, props.x2, props.y1, props.y2]"]